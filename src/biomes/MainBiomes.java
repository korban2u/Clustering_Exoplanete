package biomes;

import clusters.KMeans;
import clusters.VisualisationBiomes;
import normeCouleurs.NormeCie94;
import normeCouleurs.NormeCouleurs;
import outils.OutilsImage;
import outils.Palette;

import java.awt.image.BufferedImage;
import java.io.IOException;

import static outils.OutilsImage.extraireDonneesPixels;

/**
 * Classe principale int√©grant la d√©tection, l'√©tiquetage et l'affichage des biomes.
 * Impl√©mente les sections 2.1, 2.2 et 2.3 de la SAE.
 */
public class MainBiomes {

    public static void main(String[] args) throws IOException {
        // Test avec l'image filtr√©e
        String cheminImage = "./resultatFiltre/Planet_1_FlouGauss7x7.jpg";
        int nbBiomes = 7;

        // Lancer l'analyse compl√®te
        analyseCompleteDesBiomes(cheminImage, nbBiomes);
    }

    /**
     * Analyse compl√®te des biomes : d√©tection, √©tiquetage et visualisation.
     *
     * @param cheminImage Chemin vers l'image √† analyser
     * @param nbBiomes Nombre de biomes √† d√©tecter
     * @throws IOException En cas d'erreur de lecture/√©criture
     */
    public static void analyseCompleteDesBiomes(String cheminImage, int nbBiomes) throws IOException {
        System.out.println("=== ANALYSE COMPL√àTE DES BIOMES ===");
        System.out.println("Image source : " + cheminImage);
        System.out.println("Nombre de biomes √† d√©tecter : " + nbBiomes);
        System.out.println();

        // ================================
        // √âTAPE 2.1 : D√âTECTION DES BIOMES
        // ================================
        System.out.println("üîç √âtape 2.1 : D√©tection des groupes de pixels similaires...");

        // 1. Charger l'image
        BufferedImage image = OutilsImage.convertionCheminEnBufferedImage(cheminImage);
        System.out.println("Image charg√©e : " + image.getWidth() + "x" + image.getHeight() + " pixels");

        // 2. Extraire les donn√©es RGB
        int[][] donneesRGB = extraireDonneesPixels(image);
        System.out.println("Donn√©es extraites : " + donneesRGB.length + " pixels");

        // 3. Clustering K-Means avec norme CIE94
        NormeCouleurs normeCie94 = new NormeCie94();
        KMeans kmeans = new KMeans(normeCie94);
        System.out.println("Lancement du clustering K-Means...");
        int[] affectations = kmeans.classifier(donneesRGB, nbBiomes);

        // 4. Cr√©er palette des biomes trouv√©s
        Palette paletteBiomes = kmeans.creerPaletteBiomes(kmeans.getCentroides());
        System.out.println("‚úÖ Clustering termin√©, " + nbBiomes + " clusters d√©tect√©s");
        System.out.println();

        // ===============================
        // √âTAPE 2.2 : √âTIQUETAGE DES BIOMES
        // ===============================
        System.out.println("üè∑Ô∏è  √âtape 2.2 : √âtiquetage des biomes...");

        // √âtiqueter automatiquement les biomes d√©tect√©s
        String[] etiquettes = EtiqueteurBiomes.etiqueterTousLesBiomes(kmeans.getCentroides());

        System.out.println("Biomes d√©tect√©s et √©tiquet√©s :");
        for (int i = 0; i < etiquettes.length; i++) {
            int[] centroide = kmeans.getCentroides()[i];
            System.out.printf("  Cluster %d : %s (RGB: %d,%d,%d)%n",
                    i, etiquettes[i], centroide[0], centroide[1], centroide[2]);
        }
        System.out.println();

        // ====================================
        // √âTAPE 2.3 : AFFICHAGE DES BIOMES
        // ====================================
        System.out.println("üé® √âtape 2.3 : G√©n√©ration des visualisations...");

        // 5. Visualiser le r√©sultat global (tous les biomes sur une image)
        BufferedImage imageResultatGlobal = VisualisationBiomes.visualiserBiomes(
                image, affectations, paletteBiomes);
        OutilsImage.sauverImage(imageResultatGlobal, "./resultats/tous_biomes_detectes.jpg");
        System.out.println("‚úÖ Image globale sauvegard√©e : ./resultats/tous_biomes_detectes.jpg");

        // 6. G√©n√©rer les images individuelles de chaque biome
        int pourcentageEclaircissement = 75; // 75% comme dans l'exemple du sujet
        AffichageBiomes.genererTousLesBiomes(
                image,
                affectations,
                etiquettes,
                "./resultats/biomes_individuels",
                pourcentageEclaircissement
        );
        System.out.println("‚úÖ Images individuelles sauvegard√©es dans : ./resultats/biomes_individuels/");

        // 7. G√©n√©rer un rapport de synth√®se
        genererRapportSynthese(etiquettes, kmeans.getCentroides(), affectations);

        System.out.println();
        System.out.println("üéâ Analyse compl√®te termin√©e avec succ√®s !");
    }

    /**
     * G√©n√®re un rapport de synth√®se des biomes d√©tect√©s.
     *
     * @param etiquettes Noms des biomes
     * @param centroides Centro√Ødes des clusters
     * @param affectations Affectations des pixels
     */
    private static void genererRapportSynthese(String[] etiquettes, int[][] centroides, int[] affectations) {
        System.out.println("üìä RAPPORT DE SYNTH√àSE :");
        System.out.println("========================");

        // Calculer les statistiques pour chaque biome
        int[] compteurs = new int[etiquettes.length];
        for (int affectation : affectations) {
            compteurs[affectation]++;
        }

        int totalPixels = affectations.length;

        for (int i = 0; i < etiquettes.length; i++) {
            double pourcentage = (compteurs[i] * 100.0) / totalPixels;
            System.out.printf("  %s : %d pixels (%.1f%%) - Couleur moyenne: RGB(%d,%d,%d)%n",
                    etiquettes[i],
                    compteurs[i],
                    pourcentage,
                    centroides[i][0],
                    centroides[i][1],
                    centroides[i][2]);
        }
        System.out.println("========================");
    }

    /**
     * M√©thode pour tester avec diff√©rents param√®tres.
     *
     * @param cheminImage Chemin de l'image
     * @param nbBiomesMin Nombre minimum de biomes √† tester
     * @param nbBiomesMax Nombre maximum de biomes √† tester
     * @throws IOException En cas d'erreur
     */
    public static void testerDifferentsNombresBiomes(String cheminImage, int nbBiomesMin, int nbBiomesMax) throws IOException {
        System.out.println("=== TEST DE DIFF√âRENTS NOMBRES DE BIOMES ===");

        for (int nbBiomes = nbBiomesMin; nbBiomes <= nbBiomesMax; nbBiomes++) {
            System.out.println("\n--- Test avec " + nbBiomes + " biomes ---");
            try {
                analyseCompleteDesBiomes(cheminImage, nbBiomes);
            } catch (Exception e) {
                System.err.println("Erreur avec " + nbBiomes + " biomes : " + e.getMessage());
            }
        }
    }
}